import { MersenneTwister } from './mersenneTwister';

describe('MersenneTwister', () => {
  describe('when using an empty array as seed', () => {
    it('sets 5489 as seed', () => {
      const mersenne = new MersenneTwister([]);

      expect(mersenne.randomInt32()).toEqual(3499211612);
    });
  });

  describe('when using empty with length greater or equal than 624', () => {
    it('returns a MersenneTwister instance', () => {
      expect(new MersenneTwister(new Array(624))).toBeInstanceOf(
        MersenneTwister
      );
    });
  });

  describe('when using initSeed', () => {
    it('repeats random sequence on same seed', () => {
      const mersenne = new MersenneTwister();

      const seed = 123;

      mersenne.initSeed(seed);
      const first1 = mersenne.randomReal2();
      const first2 = mersenne.randomReal2();

      mersenne.initSeed(seed);
      const second1 = mersenne.randomReal2();
      const second2 = mersenne.randomReal2();

      expect(first1).toEqual(second1);
      expect(first2).toEqual(second2);
    });
  });

  it('allows seeding via constructor', () => {
    const seed = 325;
    const mersenne1 = new MersenneTwister(seed);
    const mersenne2 = new MersenneTwister(seed);

    for (let i = 0; i < 5; ++i) {
      expect(mersenne1.randomReal2()).toEqual(mersenne2.randomReal2());
    }
  });

  /* To generate these values you can visit
  http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/emt19937ar.html
  and download the c code, then compile the code:
  gcc -o mt -I. mtTest.c mt19937ar.c
  ./mt
  Modify the mtTest.c file to try each function with the proper seed
  */
  describe('when comparing with results from C language', () => {
    it('generates 100 Int32 values as C', () => {
      const seeds = [0x123, 0x234, 0x345, 0x456];
      const mersenne = new MersenneTwister(seeds);

      const values = [
        1067595299,
        955945823,
        477289528,
        4107218783,
        4228976476,
        3344332714,
        3355579695,
        227628506,
        810200273,
        2591290167,
        2560260675,
        3242736208,
        646746669,
        1479517882,
        4245472273,
        1143372638,
        3863670494,
        3221021970,
        1773610557,
        1138697238,
        1421897700,
        1269916527,
        2859934041,
        1764463362,
        3874892047,
        3965319921,
        72549643,
        2383988930,
        2600218693,
        3237492380,
        2792901476,
        725331109,
        605841842,
        271258942,
        715137098,
        3297999536,
        1322965544,
        4229579109,
        1395091102,
        3735697720,
        2101727825,
        3730287744,
        2950434330,
        1661921839,
        2895579582,
        2370511479,
        1004092106,
        2247096681,
        2111242379,
        3237345263,
        4082424759,
        219785033,
        2454039889,
        3709582971,
        835606218,
        2411949883,
        2735205030,
        756421180,
        2175209704,
        1873865952,
        2762534237,
        4161807854,
        3351099340,
        181129879,
        3269891896,
        776029799,
        2218161979,
        3001745796,
        1866825872,
        2133627728,
        34862734,
        1191934573,
        3102311354,
        2916517763,
        1012402762,
        2184831317,
        4257399449,
        2899497138,
        3818095062,
        3030756734,
        1282161629,
        420003642,
        2326421477,
        2741455717,
        1278020671,
        3744179621,
        271777016,
        2626330018,
        2560563991,
        3055977700,
        4233527566,
        1228397661,
        3595579322,
        1077915006,
        2395931898,
        1851927286,
        3013683506,
        1999971931,
        3006888962,
        1049781534
      ];

      for (const value in values) {
        expect(mersenne.randomInt32()).toEqual(values[value]);
      }
    });

    it('generates 100 Int31 values as C', () => {
      const seeds = [0x123, 0x234, 0x345, 0x456];
      const mersenne = new MersenneTwister(seeds);

      const values = [
        533797649,
        477972911,
        238644764,
        2053609391,
        2114488238,
        1672166357,
        1677789847,
        113814253,
        405100136,
        1295645083,
        1280130337,
        1621368104,
        323373334,
        739758941,
        2122736136,
        571686319,
        1931835247,
        1610510985,
        886805278,
        569348619,
        710948850,
        634958263,
        1429967020,
        882231681,
        1937446023,
        1982659960,
        36274821,
        1191994465,
        1300109346,
        1618746190,
        1396450738,
        362665554,
        302920921,
        135629471,
        357568549,
        1648999768,
        661482772,
        2114789554,
        697545551,
        1867848860,
        1050863912,
        1865143872,
        1475217165,
        830960919,
        1447789791,
        1185255739,
        502046053,
        1123548340,
        1055621189,
        1618672631,
        2041212379,
        109892516,
        1227019944,
        1854791485,
        417803109,
        1205974941,
        1367602515,
        378210590,
        1087604852,
        936932976,
        1381267118,
        2080903927,
        1675549670,
        90564939,
        1634945948,
        388014899,
        1109080989,
        1500872898,
        933412936,
        1066813864,
        17431367,
        595967286,
        1551155677,
        1458258881,
        506201381,
        1092415658,
        2128699724,
        1449748569,
        1909047531,
        1515378367,
        641080814,
        210001821,
        1163210738,
        1370727858,
        639010335,
        1872089810,
        135888508,
        1313165009,
        1280281995,
        1527988850,
        2116763783,
        614198830,
        1797789661,
        538957503,
        1197965949,
        925963643,
        1506841753,
        999985965,
        1503444481,
        524890767
      ];

      for (const value in values) {
        expect(mersenne.randomInt31()).toEqual(values[value]);
      }
    });

    it('generates 100 Real1 values as C', () => {
      const seeds = [0x123, 0x234, 0x345, 0x456];
      const mersenne = new MersenneTwister(seeds);

      const values = [
        0.2485689,
        0.22257348,
        0.11112763,
        0.95628639,
        0.98463532,
        0.77866314,
        0.78128178,
        0.05299889,
        0.18863945,
        0.60333176,
        0.59610714,
        0.75500836,
        0.15058244,
        0.3444771,
        0.98847604,
        0.26621219,
        0.89958089,
        0.74995262,
        0.41295089,
        0.26512361,
        0.33106136,
        0.29567548,
        0.66588028,
        0.41082114,
        0.90219361,
        0.92324799,
        0.01689178,
        0.55506568,
        0.60541059,
        0.75378743,
        0.65027305,
        0.16887931,
        0.14105855,
        0.06315739,
        0.16650583,
        0.76787535,
        0.30802692,
        0.98477563,
        0.32481996,
        0.8697849,
        0.48934664,
        0.8685253,
        0.68695152,
        0.38694633,
        0.67417966,
        0.55192771,
        0.23378341,
        0.52319297,
        0.49156192,
        0.75375318,
        0.95051358,
        0.05117269,
        0.57137569,
        0.86370459,
        0.19455473,
        0.56157584,
        0.63683955,
        0.17611803,
        0.50645548,
        0.43629342,
        0.64320262,
        0.9689964,
        0.78023862,
        0.04217259,
        0.76133104,
        0.18068352,
        0.51645608,
        0.69889841,
        0.43465427,
        0.49677392,
        0.00811711,
        0.27751889,
        0.72231315,
        0.67905471,
        0.23571839,
        0.50869568,
        0.99125305,
        0.67509179,
        0.88896953,
        0.70565304,
        0.29852652,
        0.09778972,
        0.54166221,
        0.6382949,
        0.29756238,
        0.87175975,
        0.06327802,
        0.61149011,
        0.59617776,
        0.71152526,
        0.98569495,
        0.28600862,
        0.83716105,
        0.25097164,
        0.55784637,
        0.43118542,
        0.70167787,
        0.46565475,
        0.70009589,
        0.24442131
      ];

      for (const value in values) {
        expect(mersenne.randomReal1()).toBeCloseTo(values[value], 8);
      }
    });

    it('generates 100 Real2 values as C', () => {
      const seeds = [0x123, 0x234, 0x345, 0x456];
      const mersenne = new MersenneTwister(seeds);

      const values = [
        0.2485689,
        0.22257348,
        0.11112763,
        0.95628639,
        0.98463531,
        0.77866314,
        0.78128178,
        0.05299889,
        0.18863945,
        0.60333176,
        0.59610714,
        0.75500836,
        0.15058244,
        0.3444771,
        0.98847604,
        0.26621219,
        0.89958089,
        0.74995262,
        0.41295089,
        0.26512361,
        0.33106136,
        0.29567548,
        0.66588028,
        0.41082114,
        0.90219361,
        0.92324799,
        0.01689178,
        0.55506568,
        0.60541059,
        0.75378743,
        0.65027305,
        0.16887931,
        0.14105855,
        0.06315739,
        0.16650583,
        0.76787535,
        0.30802692,
        0.98477563,
        0.32481996,
        0.8697849,
        0.48934664,
        0.8685253,
        0.68695152,
        0.38694633,
        0.67417966,
        0.55192771,
        0.23378341,
        0.52319297,
        0.49156192,
        0.75375318,
        0.95051358,
        0.05117269,
        0.57137569,
        0.86370459,
        0.19455473,
        0.56157584,
        0.63683955,
        0.17611803,
        0.50645548,
        0.43629342,
        0.64320262,
        0.9689964,
        0.78023862,
        0.04217259,
        0.76133103,
        0.18068352,
        0.51645608,
        0.69889841,
        0.43465427,
        0.49677392,
        0.00811711,
        0.27751889,
        0.72231315,
        0.67905471,
        0.23571839,
        0.50869568,
        0.99125305,
        0.67509178,
        0.88896953,
        0.70565304,
        0.29852652,
        0.09778972,
        0.54166221,
        0.6382949,
        0.29756238,
        0.87175975,
        0.06327802,
        0.61149011,
        0.59617776,
        0.71152525,
        0.98569495,
        0.28600862,
        0.83716105,
        0.25097164,
        0.55784637,
        0.43118542,
        0.70167787,
        0.46565475,
        0.70009589,
        0.24442131
      ];

      for (const value in values) {
        expect(mersenne.randomReal2()).toBeCloseTo(values[value], 8);
      }
    });

    it('generates 100 Real3 values as C', () => {
      const seeds = [0x123, 0x234, 0x345, 0x456];
      const mersenne = new MersenneTwister(seeds);

      const values = [
        0.2485689,
        0.22257348,
        0.11112763,
        0.95628639,
        0.98463532,
        0.77866314,
        0.78128178,
        0.05299889,
        0.18863945,
        0.60333176,
        0.59610714,
        0.75500836,
        0.15058244,
        0.3444771,
        0.98847604,
        0.26621219,
        0.89958089,
        0.74995262,
        0.41295089,
        0.26512361,
        0.33106136,
        0.29567548,
        0.66588028,
        0.41082114,
        0.90219361,
        0.92324799,
        0.01689178,
        0.55506568,
        0.60541059,
        0.75378743,
        0.65027305,
        0.16887931,
        0.14105855,
        0.06315739,
        0.16650583,
        0.76787535,
        0.30802692,
        0.98477563,
        0.32481996,
        0.8697849,
        0.48934664,
        0.8685253,
        0.68695152,
        0.38694633,
        0.67417966,
        0.55192771,
        0.23378341,
        0.52319297,
        0.49156192,
        0.75375318,
        0.95051358,
        0.05117269,
        0.57137569,
        0.86370459,
        0.19455473,
        0.56157584,
        0.63683955,
        0.17611803,
        0.50645548,
        0.43629342,
        0.64320262,
        0.9689964,
        0.78023862,
        0.04217259,
        0.76133103,
        0.18068352,
        0.51645608,
        0.69889841,
        0.43465427,
        0.49677392,
        0.00811711,
        0.27751889,
        0.72231315,
        0.67905471,
        0.23571839,
        0.50869568,
        0.99125305,
        0.67509179,
        0.88896953,
        0.70565304,
        0.29852652,
        0.09778972,
        0.54166221,
        0.6382949,
        0.29756238,
        0.87175975,
        0.06327802,
        0.61149011,
        0.59617776,
        0.71152525,
        0.98569495,
        0.28600862,
        0.83716105,
        0.25097164,
        0.55784637,
        0.43118542,
        0.70167787,
        0.46565475,
        0.70009589,
        0.24442131
      ];

      for (const value in values) {
        expect(mersenne.randomReal3()).toBeCloseTo(values[value], 8);
      }
    });

    it('generates 100 Real3 values as C', () => {
      const seeds = [0x123, 0x234, 0x345, 0x456];
      const mersenne = new MersenneTwister(seeds);

      const values = [
        0.2485689,
        0.11112763,
        0.98463531,
        0.78128178,
        0.18863945,
        0.59610715,
        0.15058244,
        0.98847604,
        0.89958089,
        0.41295088,
        0.33106136,
        0.66588028,
        0.90219361,
        0.01689178,
        0.6054106,
        0.65027305,
        0.14105854,
        0.16650583,
        0.30802692,
        0.32481996,
        0.48934664,
        0.68695152,
        0.67417965,
        0.23378341,
        0.49156193,
        0.95051358,
        0.57137569,
        0.19455474,
        0.63683955,
        0.50645548,
        0.64320262,
        0.78023861,
        0.76133103,
        0.51645608,
        0.43465427,
        0.00811711,
        0.72231315,
        0.23571839,
        0.99125305,
        0.88896953,
        0.29852651,
        0.54166221,
        0.29756237,
        0.06327802,
        0.59617776,
        0.98569495,
        0.83716104,
        0.55784636,
        0.70167787,
        0.70009589,
        0.34662871,
        0.02431173,
        0.71609722,
        0.20766449,
        0.52833487,
        0.24392195,
        0.6308094,
        0.04833415,
        0.15617622,
        0.10889749,
        0.83112808,
        0.89954517,
        0.64222174,
        0.53580821,
        0.00185678,
        0.12945182,
        0.30790761,
        0.15994586,
        0.22299429,
        0.23784447,
        0.4428739,
        0.97239964,
        0.13058513,
        0.73136086,
        0.78412873,
        0.57628506,
        0.05853743,
        0.4206239,
        0.82173552,
        0.69551093,
        0.51366534,
        0.85274306,
        0.61936299,
        0.42297952,
        0.90512012,
        0.23639569,
        0.50546317,
        0.18949436,
        0.33321382,
        0.98804774,
        0.60709872,
        0.06573782,
        0.32405885,
        0.19276699,
        0.91621125,
        0.90924168,
        0.56995909,
        0.7694571,
        0.71225862,
        0.60306017
      ];

      for (const value in values) {
        expect(mersenne.randomRes53()).toBeCloseTo(values[value], 8);
      }
    });
  });
});
